import logging

from cbutil import *


def test_dfs():
    assert(list(dfs([1, [2, 3], 4, [5], 6])) == [1, 2, 3, 4, 5, 6])
    assert(list(dfs(['01', ['02', '03'], '04', ['05'], '06'], is_leaf=lambda n: type(n) == str)) == ['01', '02', '03', '04', '05', '06'])
    assert(list(dfs([1, [2, 3], 4, [5], 6], reversed)) == [6, 5, 4, 3, 2, 1])
    assert(list(dfs(['01', ['02', '03'], '04', ['05'], '06'], reversed, lambda n: type(n) == str)) == ['06', '05', '04', '03', '02', '01'])


def test_bfs():
    assert(list(bfs([1, [4, 5], 2, [6], 3])) == [1, 2, 3, 4, 5, 6])
    assert(list(bfs(['01', ['04', '05'], '02', ['06'], '03'], is_leaf=lambda n: type(n) == str)) == ['01', '02', '03', '04', '05', '06'])
    assert(list(bfs([3, [6, 5], 2, [4], 1], reversed)) == [1, 2, 3, 4, 5, 6])
    assert(list(bfs(['03', ['06', '05'], '02', ['04'], '01'], reversed, lambda n: type(n) == str)) == ['01', '02', '03', '04', '05', '06'])


def test_tree_iter():
    tree = TreeIter(['01', ['02', '03'], '04', ['05'], '06'], reversed, lambda n: type(n) == str)
    assert([(tree.deepth, n, list(tree.path)) for n in tree.dfs()] == [(0, ['01', ['02', '03'], '04', ['05'], '06'], [['01', ['02', '03'], '04', ['05'], '06']]), (1, '06', [['01', ['02', '03'], '04', ['05'], '06'], '06']), (1, ['05'], [['01', ['02', '03'], '04', ['05'], '06'], ['05']]), (2, '05', [['01', ['02', '03'], '04', ['05'], '06'], ['05'], '05']), (1, '04', [['01', ['02', '03'], '04', ['05'], '06'], '04']), (1, ['02', '03'], [['01', ['02', '03'], '04', ['05'], '06'], ['02', '03']]), (2, '03', [['01', ['02', '03'], '04', ['05'], '06'], ['02', '03'], '03']), (2, '02', [['01', ['02', '03'], '04', ['05'], '06'], ['02', '03'], '02']), (1, '01', [['01', ['02', '03'], '04', ['05'], '06'], '01'])])
    tree = TreeIter(['03', ['06', '05'], '02', ['04'], '01'], reversed, lambda n: type(n) == str)
    assert([(tree.deepth, n, list(tree.path)) for n in tree.bfs()] == [(0, ['03', ['06', '05'], '02', ['04'], '01'], [['03', ['06', '05'], '02', ['04'], '01']]), (1, '01', [['03', ['06', '05'], '02', ['04'], '01'], None]), (1, ['04'], [['03', ['06', '05'], '02', ['04'], '01'], None]), (1, '02', [['03', ['06', '05'], '02', ['04'], '01'], None]), (1, ['06', '05'], [['03', ['06', '05'], '02', ['04'], '01'], None]), (1, '03', [['03', ['06', '05'], '02', ['04'], '01'], None]), (2, '04', [['03', ['06', '05'], '02', ['04'], '01'], None, None]), (2, '05', [['03', ['06', '05'], '02', ['04'], '01'], None, None]), (2, '06', [['03', ['06', '05'], '02', ['04'], '01'], None, None])])



